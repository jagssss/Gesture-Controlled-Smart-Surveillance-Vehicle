import RPi.GPIO as GPIO import time
#Import time library GPIO.setwarnings(False) GPIO.setmode(GPIO.BCM) pin numbers
TRIG = 17 ECHO = 27 TRIG1 = 18 ECHO1 = 28 led = 22
m11=16 m12=12 m21=21 m22=20
GPIO.setup(TRIG,GPIO.OUT) GPIO.setup(ECHO,GPIO.IN) GPIO.setup(TRIG1,GPIO.OUT) outputs GPIO.setup(ECHO1,GPIO.IN)
GPIO.setup(led,GPIO.OUT)
GPIO.setup(m11,GPIO.OUT) GPIO.setup(m12,GPIO.OUT) GPIO.setup(m21,GPIO.OUT) GPIO.setup(m22,GPIO.OUT)
GPIO.output(led, 1) time.sleep(5)
def stop():
print "stop" GPIO.output(m11, 0) GPIO.output(m12, 0) GPIO.output(m21, 0) GPIO.output(m22, 0)
#Import GPIO library
# programming the GPIO by BCM
# initialize GPIO Pin as outputs # initialize GPIO Pin as input
# initialize GPIO Pin as
# initialize GPIO Pin as input
 def forward():
GPIO.output(m11, 1) GPIO.output(m12, 0) GPIO.output(m21, 1) GPIO.output(m22, 0) print "Forward"
def back(): GPIO.output(m11, 0) GPIO.output(m12, 1) GPIO.output(m21, 0) GPIO.output(m22, 1) print "back"
def left(): GPIO.output(m11, 0) GPIO.output(m12, 0) GPIO.output(m21, 1) GPIO.output(m22, 0) print "left"
def right(): GPIO.output(m11, 1) GPIO.output(m12, 0) GPIO.output(m21, 0)
GPIO.output(m22, 0) print "right"
stop() count=0
while True:
i=0 avgDistance=0
for i in range(5): GPIO.output(TRIG, False) LOW time.sleep(0.1)
GPIO.output(TRIG, True) time.sleep(0.00001)
seconds GPIO.output(TRIG, False)
while GPIO.input(ECHO)==0: GPIO.output(led, False) pulse_start = time.time()
while GPIO.input(ECHO)==1:
HIGH GPIO.output(led, False)
pulse_end = time.time()
pulse_duration = pulse_end - pulse_start #time to get back the pulse to sensor
distance = pulse_duration * 17150 #Multiply pulse duration by 17150 (34300/2) to get distance distance = round(distance,2) #Round to two decimal
#Set TRIG as #Delay
#Set TRIG as HIGH #Delay of 0.00001
#Set TRIG as LOW
#Check whether the ECHO is LOW
#Check whether the ECHO is

points avgDistance=avgDistance+distance
avgDistance=avgDistance/5 print avgDistance
flag=0
if avgDistance < 6:
range count=count+1 stop() time.sleep(1) back() time.sleep(1.5)
if (count%3 ==1) & (flag==0): right()
flag=1 else:
left() flag=0
time.sleep(1.5) stop() time.sleep(1)
else:
forward() flag=0
